name: 'CI - Continuous Integration'

# Trigger on push and pull requests to main and develop branches
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  # Python configuration
  DJANGO_SETTINGS_MODULE: 'electra_server.settings.dev'
  DJANGO_SECRET_KEY: 'ci-test-secret-key-not-for-production-use-minimum-50-chars-long'
  DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/electra_test'
  JWT_SECRET_KEY: 'ci-test-jwt-secret-key-not-for-production-use'
  REDIS_URL: 'redis://localhost:6379/0'
  EMAIL_HOST: 'smtp.example.com'
  EMAIL_HOST_USER: 'test@example.com'
  EMAIL_HOST_PASSWORD: 'test-password'
  RSA_PRIVATE_KEY_PATH: 'keys/private_key.pem'
  RSA_PUBLIC_KEY_PATH: 'keys/public_key.pem'
  DJANGO_ALLOWED_HOSTS: 'localhost,127.0.0.1,testserver'
  # Skip validation in CI for faster builds
  SKIP_ENV_VALIDATION: 'true'
  # Flutter configuration
  FLUTTER_VERSION: '3.16.9'

jobs:
  # Django Backend CI Pipeline
  django-ci:
    name: 'Django Backend Tests'
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11']
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: electra_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      
      - name: 'Set up Python ${{ matrix.python-version }}'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
      
      - name: 'Install system dependencies'
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev
      
      - name: 'Install Python dependencies'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install hadolint-py  # For Dockerfile linting
      
      - name: 'Generate RSA Keys for JWT (CI only)'
        run: |
          mkdir -p keys
          python scripts/generate_rsa_keys.py --key-size 2048
      
      - name: 'Validate Environment Configuration'
        run: |
          # Test the validation script itself
          python scripts/validate_environment.py --skip-docker --skip-cicd
        env:
          SKIP_ENV_VALIDATION: 'false'  # Enable validation for this step
      
      - name: 'Run Django system checks'
        run: |
          python manage.py check --deploy --fail-level WARNING
      
      - name: 'Check for missing migrations'
        run: |
          python manage.py makemigrations --check --dry-run --verbosity 2
      
      - name: 'Run database migrations'
        run: |
          python manage.py migrate --verbosity 2
      
      - name: 'Run flake8 linting'
        run: |
          flake8 --max-line-length=100 --exclude=venv,migrations,node_modules \
                 --ignore=E203,W503 --show-source --statistics .
      
      - name: 'Run black code formatting check'
        run: |
          black --check --diff --color .
      
      - name: 'Run isort import sorting check'
        run: |
          isort --check-only --diff --color .
      
      - name: 'Run pytest with coverage'
        run: |
          pytest --cov=apps --cov-report=xml --cov-report=html --cov-report=term \
                 --junitxml=pytest-results-${{ matrix.python-version }}.xml \
                 --verbose tests/
        env:
          DJANGO_SETTINGS_MODULE: 'electra_server.settings.test'
      
      - name: 'Upload coverage reports to Codecov'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend-python${{ matrix.python-version }}
          name: backend-coverage-${{ matrix.python-version }}
          fail_ci_if_error: false
      
      - name: 'Upload test results'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: |
            pytest-results-${{ matrix.python-version }}.xml
            htmlcov/
            coverage.xml
          retention-days: 30
      
      - name: 'Lint Dockerfile'
        run: |
          hadolint Dockerfile --config .hadolint.yaml || true
  
  # Flutter Frontend CI Pipeline
  flutter-ci:
    name: 'Flutter Frontend Tests'
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        flutter-channel: ['stable']
    
    defaults:
      run:
        working-directory: electra_flutter
    
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      
      - name: 'Setup Flutter'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ matrix.flutter-channel }}
          cache: true
      
      - name: 'Flutter doctor'
        run: flutter doctor -v
      
      - name: 'Get Flutter dependencies'
        run: flutter pub get
      
      - name: 'Validate Flutter Environment Configuration'
        run: |
          # Test Flutter configuration validation
          flutter test test/config_test.dart || echo "Config tests not yet implemented"
        continue-on-error: true  # Allow failure until tests are implemented
      
      - name: 'Generate code with build_runner'
        run: flutter packages pub run build_runner build --delete-conflicting-outputs
      
      - name: 'Run Flutter analyze'
        run: flutter analyze --fatal-infos
      
      - name: 'Check Flutter formatting'
        run: dart format --set-exit-if-changed lib/ test/
      
      - name: 'Run Flutter tests with coverage'
        run: flutter test --coverage --reporter=expanded
      
      - name: 'Upload Flutter coverage to Codecov'
        uses: codecov/codecov-action@v3
        with:
          file: ./electra_flutter/coverage/lcov.info
          flags: frontend-flutter
          name: frontend-coverage
          fail_ci_if_error: false
      
      - name: 'Build Flutter web application'
        run: flutter build web --release --web-renderer canvaskit
      
      - name: 'Upload Flutter web build artifact'
        uses: actions/upload-artifact@v4
        with:
          name: flutter-web-build
          path: |
            electra_flutter/build/web/
          retention-days: 30
      
      - name: 'Build Flutter APK (release)'
        run: |
          # Setup Android SDK for APK build
          flutter build apk --release --build-name=1.0.0+${{ github.run_number }}
        continue-on-error: true  # May fail without proper Android setup
      
      - name: 'Upload APK artifact'
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: flutter-apk-release
          path: electra_flutter/build/app/outputs/flutter-apk/app-release.apk
          retention-days: 30

  # Docker Image Build & Security Checks
  docker-security:
    name: 'Docker Security & Build'
    runs-on: ubuntu-latest
    needs: [django-ci]
    
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      
      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v3
      
      - name: 'Build Docker image (development)'
        uses: docker/build-push-action@v5
        with:
          context: .
          target: development
          tags: electra:dev-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/electra-dev.tar
      
      - name: 'Build Docker image (production)'
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          tags: electra:prod-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/electra-prod.tar
      
      - name: 'Run Trivy vulnerability scanner'
        uses: aquasecurity/trivy-action@master
        with:
          input: '/tmp/electra-prod.tar'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: 'Upload Trivy scan results to GitHub Security tab'
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: 'Upload Docker images as artifacts'
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: |
            /tmp/electra-dev.tar
            /tmp/electra-prod.tar
          retention-days: 7

  # Database Migration Safety Checks
  migration-checks:
    name: 'Database Migration Safety'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: electra_migration_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      
      - name: 'Set up Python 3.11'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: 'Install dependencies'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: 'Generate RSA Keys'
        run: |
          mkdir -p keys
          python scripts/generate_rsa_keys.py --key-size 2048
      
      - name: 'Run migration safety checks'
        run: |
          # Check for destructive migrations
          python manage.py makemigrations --check --dry-run
          
          # Simulate migration on fresh database
          python manage.py migrate --verbosity 2
          
          # Check for any missing migrations after base migrations
          python manage.py makemigrations --check --dry-run
        env:
          DJANGO_SETTINGS_MODULE: 'electra_server.settings.dev'
          DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/electra_migration_test'
          DJANGO_SECRET_KEY: 'migration-test-key'

  # Integration Health Check
  integration-test:
    name: 'Integration Health Check'
    runs-on: ubuntu-latest
    needs: [django-ci, flutter-ci]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: electra_integration
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      
      - name: 'Set up Python 3.11'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: 'Install dependencies'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: 'Generate RSA Keys'
        run: |
          mkdir -p keys
          python scripts/generate_rsa_keys.py --key-size 2048
      
      - name: 'Run database migrations'
        run: |
          python manage.py migrate
          python manage.py collectstatic --noinput
        env:
          DJANGO_SETTINGS_MODULE: 'electra_server.settings.dev'
          DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/electra_integration'
          DJANGO_SECRET_KEY: 'integration-test-key'
      
      - name: 'Start Django server in background'
        run: |
          python manage.py runserver 0.0.0.0:8000 &
          sleep 10
        env:
          DJANGO_SETTINGS_MODULE: 'electra_server.settings.dev'
          DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/electra_integration'
          DJANGO_SECRET_KEY: 'integration-test-key'
      
      - name: 'Health check API endpoints'
        run: |
          # Test health endpoint
          curl -f http://localhost:8000/api/health/ || exit 1
          
          # Test API base endpoint
          curl -f -H "Accept: application/json" http://localhost:8000/api/ || exit 1
      
      - name: 'Smoke test critical endpoints'
        run: |
          # Test authentication endpoints exist
          curl -f -X POST http://localhost:8000/api/auth/register/ \
               -H "Content-Type: application/json" \
               -d '{}' || echo "Register endpoint accessible"
          
          curl -f -X POST http://localhost:8000/api/auth/login/ \
               -H "Content-Type: application/json" \
               -d '{}' || echo "Login endpoint accessible"

# Conclusion job to gate further processes
ci-conclusion:
  name: 'CI Pipeline Conclusion'
  runs-on: ubuntu-latest
  needs: [django-ci, flutter-ci, docker-security, integration-test]
  if: always()
  
  steps:
    - name: 'Check CI Pipeline Status'
      run: |
        echo "Django CI Status: ${{ needs.django-ci.result }}"
        echo "Flutter CI Status: ${{ needs.flutter-ci.result }}"
        echo "Docker Security Status: ${{ needs.docker-security.result }}"
        echo "Integration Test Status: ${{ needs.integration-test.result }}"
        
        if [[ "${{ needs.django-ci.result }}" != "success" || 
              "${{ needs.flutter-ci.result }}" != "success" || 
              "${{ needs.docker-security.result }}" != "success" || 
              "${{ needs.integration-test.result }}" != "success" ]]; then
          echo "❌ CI Pipeline failed!"
          exit 1
        else
          echo "✅ CI Pipeline passed successfully!"
        fi