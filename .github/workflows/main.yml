name: Electra CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  FLUTTER_VERSION: '3.16.5'

jobs:
  # Backend Tests and Build
  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: electra_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: electra_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    defaults:
      run:
        working-directory: ./server

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: server/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Type check
      run: npm run type-check

    - name: Lint code
      run: npm run lint

    - name: Run tests
      run: npm run test:coverage
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://electra_test:test_password@localhost:5432/electra_test
        JWT_SECRET: test_jwt_secret_32_characters_long
        JWT_REFRESH_SECRET: test_refresh_secret_32_characters
        VOTE_ENCRYPTION_KEY: test_encryption_key_32_bytes_hex

    - name: Build application
      run: npm run build

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./server/coverage/lcov.info
        flags: backend

    - name: Build Docker image
      if: github.ref == 'refs/heads/main'
      run: |
        docker build -t electra-api:latest .
        docker tag electra-api:latest electra-api:${{ github.sha }}

  # Frontend Tests and Build
  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./client

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'

    - name: Get dependencies
      run: flutter pub get

    - name: Analyze code
      run: flutter analyze

    - name: Check formatting
      run: dart format --output=none --set-exit-if-changed .

    - name: Run tests
      run: flutter test --coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./client/coverage/lcov.info
        flags: frontend

    - name: Build for web
      run: flutter build web --release

    - name: Build for Android
      run: flutter build apk --release

    - name: Build for iOS (macOS only)
      if: runner.os == 'macOS'
      run: flutter build ios --release --no-codesign

    - name: Upload web build artifacts
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: web-build
        path: client/build/web/

    - name: Upload Android APK
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: android-apk
        path: client/build/app/outputs/flutter-apk/app-release.apk

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'Electra'
        path: '.'
        format: 'ALL'

    - name: Upload Dependency Check results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: reports/

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: electra_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: electra_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: server/package-lock.json

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}

    - name: Install backend dependencies
      run: npm ci
      working-directory: ./server

    - name: Install frontend dependencies
      run: flutter pub get
      working-directory: ./client

    - name: Start backend server
      run: |
        npm run build
        npm start &
        sleep 10
      working-directory: ./server
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://electra_test:test_password@localhost:5432/electra_test
        JWT_SECRET: test_jwt_secret_32_characters_long
        JWT_REFRESH_SECRET: test_refresh_secret_32_characters
        VOTE_ENCRYPTION_KEY: test_encryption_key_32_bytes_hex
        PORT: 3000

    - name: Run integration tests
      run: flutter test integration_test/
      working-directory: ./client

  # Deployment (Production)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend, frontend, security, integration]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://voting.yourdomain.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download web build artifacts
      uses: actions/download-artifact@v3
      with:
        name: web-build
        path: ./client/build/web/

    - name: Deploy to Firebase Hosting
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
        projectId: '${{ secrets.FIREBASE_PROJECT_ID }}'
        channelId: live

    - name: Deploy to DigitalOcean App Platform
      uses: digitalocean/app_action@v1.1.5
      with:
        app_name: electra-api
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        images: '[
          {
            "name": "api",
            "image": {
              "registry_type": "DOCKER_HUB",
              "repository": "electra-api",
              "tag": "${{ github.sha }}"
            }
          }
        ]'

    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v9
      with:
        configPath: './lighthouse.config.js'
        uploadArtifacts: true
        temporaryPublicStorage: true

    - name: Run Artillery load tests
      run: |
        npm install -g artillery
        artillery run tests/load/api-load-test.yml

  # Mobile App Distribution
  mobile-distribution:
    name: Distribute Mobile Apps
    runs-on: ubuntu-latest
    needs: [frontend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Download Android APK
      uses: actions/download-artifact@v3
      with:
        name: android-apk
        path: ./

    - name: Upload to Firebase App Distribution
      uses: wzieba/Firebase-Distribution-Github-Action@v1
      with:
        appId: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
        serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
        groups: testers
        file: app-release.apk
        releaseNotes: "Automatic build from commit ${{ github.sha }}"

    - name: Upload to Google Play Store (Internal Testing)
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
        packageName: com.electra.voting
        releaseFiles: app-release.apk
        track: internal
        status: completed