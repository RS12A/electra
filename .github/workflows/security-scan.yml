name: 'Security Scanning'

# Run weekly and on pull requests for security scanning
on:
  schedule:
    # Run every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  pull_request:
    branches: [main, develop]
    paths:
      - 'requirements.txt'
      - 'electra_flutter/pubspec.yaml'
      - 'electra_flutter/pubspec.lock'
      - '.github/workflows/**'
  workflow_dispatch: # Allow manual triggering

env:
  # Security scan configuration
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  
permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Python dependency scanning
  python-security-scan:
    name: 'Python Security Scan'
    runs-on: ubuntu-latest
    
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      
      - name: 'Set up Python 3.11'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: 'Install dependencies'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pip-audit safety bandit
      
      - name: 'Run pip-audit for known vulnerabilities'
        run: |
          echo "üîç Running pip-audit for vulnerability scanning"
          pip-audit --format=json --output=pip-audit-results.json || true
          pip-audit --format=sarif --output=pip-audit-results.sarif || true
          
          # Also run in standard format for readable output
          pip-audit || echo "pip-audit found vulnerabilities"
        continue-on-error: true
      
      - name: 'Run Safety check'
        run: |
          echo "üõ°Ô∏è Running Safety vulnerability check"
          safety check --json --output=safety-results.json || true
          safety check || echo "Safety found vulnerabilities"
        continue-on-error: true
      
      - name: 'Run Bandit security linter'
        run: |
          echo "üîí Running Bandit security linter"
          bandit -r . -f json -o bandit-results.json \
                 -x ./venv,./node_modules,./electra_flutter \
                 --skip B101,B601 || true
          
          bandit -r . -x ./venv,./node_modules,./electra_flutter \
                 --skip B101,B601 || echo "Bandit found security issues"
        continue-on-error: true
      
      - name: 'Upload pip-audit SARIF to GitHub Security'
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: pip-audit-results.sarif
          category: pip-audit
        continue-on-error: true
      
      - name: 'Upload security scan results'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: python-security-results
          path: |
            pip-audit-results.json
            pip-audit-results.sarif
            safety-results.json
            bandit-results.json
          retention-days: 30

  # Flutter/Dart dependency scanning
  flutter-security-scan:
    name: 'Flutter Security Scan'
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: electra_flutter
    
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      
      - name: 'Setup Flutter'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.9'
          cache: true
      
      - name: 'Get Flutter dependencies'
        run: flutter pub get
      
      - name: 'Run Flutter/Dart security audit'
        run: |
          echo "üîç Running Dart security audit"
          dart pub deps --style=compact || true
          
          # Check for known security issues in dependencies
          flutter pub audit || echo "Flutter pub audit found issues"
        continue-on-error: true
      
      - name: 'Analyze Flutter code for security issues'
        run: |
          echo "üîí Analyzing Flutter code for security patterns"
          # Run Flutter analyze with security focus
          flutter analyze --fatal-infos || echo "Flutter analyze found issues"
        continue-on-error: true

  # Secret scanning with Gitleaks
  secret-scanning:
    name: 'Secret Scanning'
    runs-on: ubuntu-latest
    
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive scanning
      
      - name: 'Install Gitleaks'
        run: |
          echo "üîß Installing Gitleaks"
          GITLEAKS_VERSION="8.18.0"
          wget -q "https://github.com/gitleaks/gitleaks/releases/download/v${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz"
          tar -xzf "gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz"
          sudo mv gitleaks /usr/local/bin/
          gitleaks version
      
      - name: 'Run Gitleaks secret scan'
        run: |
          echo "üïµÔ∏è Running Gitleaks secret scanning"
          gitleaks detect --source . --report-format sarif --report-path gitleaks-results.sarif --verbose || true
          gitleaks detect --source . --report-format json --report-path gitleaks-results.json --verbose || true
          
          # Also run against git history
          gitleaks detect --source . --log-opts="--all" --verbose || echo "Gitleaks found potential secrets"
        continue-on-error: true
      
      - name: 'Upload Gitleaks SARIF to GitHub Security'
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gitleaks-results.sarif
          category: gitleaks
        continue-on-error: true
      
      - name: 'Upload secret scan results'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-scan-results
          path: |
            gitleaks-results.sarif
            gitleaks-results.json
          retention-days: 30

  # OWASP Dependency Check
  owasp-dependency-check:
    name: 'OWASP Dependency Check'
    runs-on: ubuntu-latest
    
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      
      - name: 'Set up Java 11'
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      
      - name: 'Install OWASP Dependency Check'
        run: |
          echo "üîß Installing OWASP Dependency Check"
          OWASP_DC_VERSION="9.0.4"
          wget -q "https://github.com/jeremylong/DependencyCheck/releases/download/v${OWASP_DC_VERSION}/dependency-check-${OWASP_DC_VERSION}-release.zip"
          unzip -q "dependency-check-${OWASP_DC_VERSION}-release.zip"
          sudo mv dependency-check /opt/
          sudo ln -s /opt/dependency-check/bin/dependency-check.sh /usr/local/bin/dependency-check
      
      - name: 'Update OWASP NVD Database'
        run: |
          echo "üìä Updating OWASP NVD database"
          dependency-check --updateonly --nvdDatafeed https://nvd.nist.gov/feeds/json/cve/1.1/
        continue-on-error: true
      
      - name: 'Run OWASP Dependency Check'
        run: |
          echo "üõ°Ô∏è Running OWASP Dependency Check"
          dependency-check \
            --scan . \
            --exclude "**/node_modules/**" \
            --exclude "**/venv/**" \
            --exclude "**/.git/**" \
            --format XML \
            --format JSON \
            --format SARIF \
            --out ./owasp-dependency-check-results \
            --project "Electra" \
            --failOnCVSS 7 || echo "OWASP Dependency Check found high-severity vulnerabilities"
        continue-on-error: true
      
      - name: 'Upload OWASP SARIF to GitHub Security'
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ./owasp-dependency-check-results/dependency-check-report.sarif
          category: owasp-dependency-check
        continue-on-error: true
      
      - name: 'Upload OWASP results'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owasp-dependency-check-results
          path: |
            ./owasp-dependency-check-results/
          retention-days: 30

  # Snyk vulnerability scanning (if token available)
  snyk-security-scan:
    name: 'Snyk Security Scan'
    runs-on: ubuntu-latest
    if: ${{ secrets.SNYK_TOKEN != '' }}
    
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      
      - name: 'Set up Python 3.11'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: 'Install Python dependencies'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: 'Setup Flutter'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.9'
          cache: true
      
      - name: 'Install Flutter dependencies'
        run: |
          cd electra_flutter
          flutter pub get
      
      - name: 'Run Snyk Python vulnerability scan'
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --file=requirements.txt
        continue-on-error: true
      
      - name: 'Upload Snyk results to GitHub Code Scanning'
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif
          category: snyk-python
        continue-on-error: true
      
      - name: 'Run Snyk Flutter/Dart scan'
        run: |
          echo "üîç Running Snyk scan on Flutter dependencies"
          npx snyk test --file=electra_flutter/pubspec.yaml --package-manager=pub || echo "Snyk found Flutter vulnerabilities"
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

  # CodeQL Analysis
  codeql-analysis:
    name: 'CodeQL Analysis'
    runs-on: ubuntu-latest
    
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: ['python', 'javascript']
    
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      
      - name: 'Initialize CodeQL'
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: +security-and-quality
      
      - name: 'Autobuild'
        uses: github/codeql-action/autobuild@v3
        if: matrix.language == 'python'
      
      - name: 'Manual build for JavaScript'
        if: matrix.language == 'javascript'
        run: |
          cd electra_flutter
          # Install Flutter and build web version for JS analysis
          flutter pub get
          flutter build web --release
      
      - name: 'Perform CodeQL Analysis'
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{ matrix.language }}'

  # Docker image security scanning
  docker-security-scan:
    name: 'Docker Security Scan'
    runs-on: ubuntu-latest
    
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      
      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v3
      
      - name: 'Build Docker image for scanning'
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          tags: electra:security-scan
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: 'Run Trivy vulnerability scanner'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'electra:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: 'Run Trivy filesystem scan'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
      
      - name: 'Upload Trivy scan results to GitHub Security tab'
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-image'
        continue-on-error: true
      
      - name: 'Upload Trivy filesystem scan results'
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'
          category: 'trivy-filesystem'
        continue-on-error: true

  # Infrastructure as Code security scanning
  iac-security-scan:
    name: 'Infrastructure Security Scan'
    runs-on: ubuntu-latest
    
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      
      - name: 'Run Checkov IaC security scan'
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,kubernetes,github_actions
          output_format: sarif
          output_file_path: checkov-results.sarif
          skip_check: CKV_DOCKER_2,CKV_DOCKER_3  # Skip specific checks if needed
        continue-on-error: true
      
      - name: 'Upload Checkov results to GitHub Security'
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif
          category: 'checkov-iac'
        continue-on-error: true

  # Security summary and reporting
  security-summary:
    name: 'Security Summary'
    runs-on: ubuntu-latest
    needs: [
      python-security-scan,
      flutter-security-scan,
      secret-scanning,
      owasp-dependency-check,
      codeql-analysis,
      docker-security-scan,
      iac-security-scan
    ]
    if: always()
    
    steps:
      - name: 'Download all scan results'
        uses: actions/download-artifact@v4
        with:
          path: scan-results
      
      - name: 'Generate security summary'
        run: |
          echo "# üõ°Ô∏è Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          
          # Check job results
          echo "- Python Security Scan: ${{ needs.python-security-scan.result }}" >> security-summary.md
          echo "- Flutter Security Scan: ${{ needs.flutter-security-scan.result }}" >> security-summary.md
          echo "- Secret Scanning: ${{ needs.secret-scanning.result }}" >> security-summary.md
          echo "- OWASP Dependency Check: ${{ needs.owasp-dependency-check.result }}" >> security-summary.md
          echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-summary.md
          echo "- Docker Security Scan: ${{ needs.docker-security-scan.result }}" >> security-summary.md
          echo "- IaC Security Scan: ${{ needs.iac-security-scan.result }}" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## Recommendations" >> security-summary.md
          echo "" >> security-summary.md
          echo "1. Review all security findings in the Security tab" >> security-summary.md
          echo "2. Update dependencies with known vulnerabilities" >> security-summary.md
          echo "3. Address any secret leaks immediately" >> security-summary.md
          echo "4. Follow security best practices in code reviews" >> security-summary.md
          
          cat security-summary.md
      
      - name: 'Upload security summary'
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 90
      
      - name: 'Check for critical security issues'
        run: |
          echo "üîç Checking for critical security issues"
          
          CRITICAL_FOUND=false
          
          # Check if any critical issues were found (this would be enhanced with actual parsing)
          if [[ "${{ needs.python-security-scan.result }}" == "failure" ]]; then
            echo "‚ö†Ô∏è Critical issues found in Python dependencies"
            CRITICAL_FOUND=true
          fi
          
          if [[ "${{ needs.secret-scanning.result }}" == "failure" ]]; then
            echo "‚ö†Ô∏è Potential secrets found in repository"
            CRITICAL_FOUND=true
          fi
          
          if [[ "$CRITICAL_FOUND" == "true" ]]; then
            echo "‚ùå Critical security issues detected! Please review immediately."
            # In a real implementation, you might want to fail the workflow
            # exit 1
          else
            echo "‚úÖ No critical security issues detected"
          fi